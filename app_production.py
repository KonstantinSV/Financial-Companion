"""
FinancialCompanion Production - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
=================================================

–ü—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–∂–±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
—Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 2.0 (Production)
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import logging
import asyncio
from typing import Dict, List, Optional, Any
import time
import hashlib
import hmac

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from config import settings, validate_settings
from security import security_manager
from transaction_processor import TransactionProcessor, TransactionData
from database import DatabaseManager
from utils import format_currency, get_transaction_examples
from test_data import get_sample_transactions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.logging.LOG_LEVEL),
    format=settings.logging.LOG_FORMAT,
    handlers=[
        logging.FileHandler(settings.logging.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
if settings.monitoring.SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.logging import LoggingIntegration
    
    sentry_logging = LoggingIntegration(
        level=logging.INFO,
        event_level=logging.ERROR
    )
    
    sentry_sdk.init(
        dsn=settings.monitoring.SENTRY_DSN,
        environment=settings.monitoring.SENTRY_ENVIRONMENT,
        integrations=[sentry_logging],
        traces_sample_rate=1.0,
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title=settings.APP_NAME,
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if 'db_manager' not in st.session_state:
    st.session_state.db_manager = DatabaseManager()

if 'processor' not in st.session_state:
    st.session_state.processor = TransactionProcessor()

if 'transaction_history' not in st.session_state:
    st.session_state.transaction_history = []

if 'user_authenticated' not in st.session_state:
    st.session_state.user_authenticated = False

if 'current_user' not in st.session_state:
    st.session_state.current_user = None

if 'security_events' not in st.session_state:
    st.session_state.security_events = []

def check_authentication():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not st.session_state.user_authenticated:
        st.error("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        show_login_page()
        st.stop()

def show_login_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞"""
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.markdown("**FinancialCompanion Production - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**")
    
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submit_button = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if submit_button:
            if username and password:
                # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å (–≤ Streamlit —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)
                ip_address = "127.0.0.1"  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                auth_result = security_manager.authenticate_user(username, password, ip_address)
                
                if auth_result:
                    st.session_state.user_authenticated = True
                    st.session_state.current_user = auth_result["user"]
                    st.session_state.access_token = auth_result["access_token"]
                    
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    st.info("""
    **–î–µ–º–æ-–¥–æ—Å—Ç—É–ø:**
    - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `admin`
    - –ü–∞—Ä–æ–ª—å: `admin123`
    """)

def log_user_action(action: str, resource: str, details: Dict[str, Any], success: bool = True):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if st.session_state.current_user:
        security_manager.log_security_event(
            user_id=st.session_state.current_user["id"],
            action=action,
            resource=resource,
            details=details,
            ip_address="127.0.0.1",  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            user_agent="Streamlit",
            success=success
        )

def show_security_dashboard():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    st.header("üõ°Ô∏è –î–∞—à–±–æ—Ä–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ")
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", "1")
    
    with col3:
        st.metric("–ü–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞", "0")
    
    with col4:
        st.metric("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "0")
    
    # –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    st.subheader("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞
    audit_events = security_manager.audit_manager.get_audit_events(limit=10)
    
    if audit_events:
        events_data = []
        for event in audit_events:
            events_data.append({
                "–í—Ä–µ–º—è": event.timestamp.strftime("%H:%M:%S"),
                "–î–µ–π—Å—Ç–≤–∏–µ": event.action,
                "–†–µ—Å—É—Ä—Å": event.resource,
                "IP": event.ip_address,
                "–°—Ç–∞—Ç—É—Å": "‚úÖ" if event.success else "‚ùå"
            })
        
        df_events = pd.DataFrame(events_data)
        st.dataframe(df_events, use_container_width=True)
    else:
        st.info("–°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_transaction_analysis():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if st.session_state.current_user["role"] not in ["admin", "analyst"]:
        st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å—É
    log_user_action("ACCESS", "TRANSACTION_ANALYSIS", {"page": "transaction_analysis"})
    
    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìù –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        example_texts = get_transaction_examples()
        selected_example = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:",
            ["–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç..."] + list(example_texts.keys())
        )
        
        if selected_example != "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç...":
            default_text = example_texts[selected_example]
        else:
            default_text = ""
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
        transaction_text = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            value=default_text,
            height=150,
            help="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col_btn1, col_btn2, col_btn3 = st.columns(3)
        
        with col_btn1:
            process_btn = st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", type="primary", use_container_width=True)
        
        with col_btn2:
            clear_btn = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)
        
        with col_btn3:
            save_btn = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True, disabled=not transaction_text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if process_btn and transaction_text:
        with st.spinner("üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."):
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_user_action("PROCESS_TRANSACTION", "TRANSACTION", {
                    "text_length": len(transaction_text),
                    "example_used": selected_example != "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç..."
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                if len(transaction_text) > 10000:
                    st.error("‚ùå –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
                    log_user_action("PROCESS_TRANSACTION", "TRANSACTION", 
                                  {"error": "text_too_long"}, success=False)
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                result = st.session_state.processor.process_transaction(transaction_text)
                
                if result.get('transaction_data'):
                    # –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    transaction_data = result['transaction_data']
                    if transaction_data.account_number:
                        encrypted_account = security_manager.encrypt_sensitive_data(transaction_data.account_number)
                        transaction_data.account_number = encrypted_account
                    
                    if transaction_data.iban:
                        encrypted_iban = security_manager.encrypt_sensitive_data(transaction_data.iban)
                        transaction_data.iban = encrypted_iban
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    transaction_id = st.session_state.db_manager.save_transaction(
                        transaction_data,
                        result.get('validation_result', {}),
                        transaction_text
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    log_user_action("SAVE_TRANSACTION", "DATABASE", {
                        "transaction_id": transaction_id,
                        "amount": transaction_data.amount,
                        "currency": transaction_data.currency
                    })
                    
                    st.success(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID: {transaction_id})")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                    log_user_action("PROCESS_TRANSACTION", "TRANSACTION", 
                                  {"error": "processing_failed"}, success=False)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                show_transaction_result(result)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                log_user_action("PROCESS_TRANSACTION", "TRANSACTION", 
                              {"error": str(e)}, success=False)
    
    # –†–∞–∑–¥–µ–ª –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    st.divider()
    st.subheader("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:",
        type=['txt', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt) –∏ CSV —Ñ–∞–π–ª—ã (.csv)"
    )
    
    if uploaded_file is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size_mb = uploaded_file.size / (1024 * 1024)
        if file_size_mb > settings.performance.MAX_FILE_SIZE_MB:
            st.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.performance.MAX_FILE_SIZE_MB} –ú–ë")
            return
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_file.name} ({file_size_mb:.2f} –ú–ë)")
        
        with col2:
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª", type="primary", use_container_width=True):
                process_batch_file(uploaded_file)

def process_batch_file(uploaded_file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    with st.spinner("üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."):
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            log_user_action("PROCESS_FILE", "FILE_UPLOAD", {
                "filename": uploaded_file.name,
                "size_mb": uploaded_file.size / (1024 * 1024)
            })
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            if uploaded_file.type == "text/plain":
                content = str(uploaded_file.read(), "utf-8")
                transactions = [line.strip() for line in content.split('\n') if line.strip()]
            elif uploaded_file.type == "text/csv":
                df = pd.read_csv(uploaded_file)
                possible_cols = ['description', 'text', 'transaction', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è']
                transaction_col = None
                for col in possible_cols:
                    if col in df.columns:
                        transaction_col = col
                        break
                
                if transaction_col:
                    transactions = df[transaction_col].dropna().tolist()
                else:
                    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    return
            else:
                transactions = []
            
            if transactions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                if len(transactions) > settings.performance.MAX_TRANSACTIONS_PER_REQUEST:
                    st.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ú–∞–∫—Å–∏–º—É–º: {settings.performance.MAX_TRANSACTIONS_PER_REQUEST}")
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                results = []
                successful = 0
                failed = 0
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for i, transaction_text in enumerate(transactions):
                    progress_bar.progress((i + 1) / len(transactions))
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i + 1}/{len(transactions)}: {transaction_text[:50]}...")
                    
                    try:
                        result = st.session_state.processor.process_transaction(transaction_text)
                        results.append(result)
                        
                        if result.get('transaction_data'):
                            successful += 1
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
                            transaction_data = result['transaction_data']
                            if transaction_data.account_number:
                                transaction_data.account_number = security_manager.encrypt_sensitive_data(
                                    transaction_data.account_number
                                )
                            if transaction_data.iban:
                                transaction_data.iban = security_manager.encrypt_sensitive_data(
                                    transaction_data.iban
                                )
                            
                            st.session_state.db_manager.save_transaction(
                                transaction_data,
                                result.get('validation_result', {}),
                                transaction_text
                            )
                        else:
                            failed += 1
                    
                    except Exception as e:
                        failed += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {i + 1}: {e}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_user_action("PROCESS_FILE_COMPLETE", "FILE_UPLOAD", {
                    "total": len(transactions),
                    "successful": successful,
                    "failed": failed
                })
                
                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                show_batch_processing_stats(results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            log_user_action("PROCESS_FILE", "FILE_UPLOAD", {"error": str(e)}, success=False)

def show_transaction_result(result: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    if not result.get('transaction_data'):
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return
    
    transaction_data = result['transaction_data']
    validation_result = result.get('validation_result', {})
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π
    display_data = {
        "–°—É–º–º–∞": format_currency(transaction_data.amount, transaction_data.currency),
        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å": transaction_data.recipient,
        "–û–ø–∏—Å–∞–Ω–∏–µ": transaction_data.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    }
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if transaction_data.account_number:
        display_data["–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞"] = security_manager.mask_data(
            transaction_data.account_number, "account"
        )
    
    if transaction_data.iban:
        display_data["IBAN"] = security_manager.mask_data(
            transaction_data.iban, "iban"
        )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    col1, col2 = st.columns(2)
    
    with col1:
        st.json(display_data)
    
    with col2:
        # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation_result.get('is_valid'):
            st.success("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        else:
            st.error("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = validation_result.get('warnings', [])
        if warnings:
            st.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in warnings:
                st.write(f"‚Ä¢ {warning}")
        
        # –û—à–∏–±–∫–∏
        errors = validation_result.get('errors', [])
        if errors:
            st.error("‚ùå –û—à–∏–±–∫–∏:")
            for error in errors:
                st.write(f"‚Ä¢ {error}")

def show_batch_processing_stats(results: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(results)
    successful = sum(1 for r in results if r.get('transaction_data'))
    failed = total - successful
    
    # –í–∞–ª—é—Ç—ã
    currencies = {}
    amounts = []
    
    for result in results:
        if result.get('transaction_data'):
            currency = result['transaction_data'].currency
            amount = result['transaction_data'].amount
            
            currencies[currency] = currencies.get(currency, 0) + 1
            amounts.append(amount)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", total)
    
    with col2:
        st.metric("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", successful)
    
    with col3:
        st.metric("–û—à–∏–±–∫–∏", failed)
    
    with col4:
        success_rate = (successful / total * 100) if total > 0 else 0
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{success_rate:.1f}%")
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤–∞–ª—é—Ç–∞–º
    if currencies:
        st.subheader("üí± –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º")
        fig = px.pie(
            values=list(currencies.values()),
            names=list(currencies.keys()),
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤–∞–ª—é—Ç–∞–º"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—É–º–º
    if amounts:
        st.subheader("üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º")
        fig = px.histogram(
            x=amounts,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            labels={'x': '–°—É–º–º–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
        )
        st.plotly_chart(fig, use_container_width=True)

def show_dashboard():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    st.header("üìä –î–∞—à–±–æ—Ä–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    transactions = st.session_state.db_manager.get_all_transactions(limit=100)
    
    if not transactions:
        st.info("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    total_amount = sum(t.amount for t in transactions)
    avg_amount = total_amount / len(transactions) if transactions else 0
    
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", len(transactions))
    
    with col2:
        st.metric("–û–±—â–∞—è —Å—É–º–º–∞", format_currency(total_amount, "RUB"))
    
    with col3:
        st.metric("–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞", format_currency(avg_amount, "RUB"))
    
    with col4:
        currencies = set(t.currency for t in transactions)
        st.metric("–í–∞–ª—é—Ç", len(currencies))
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        dates = [t.timestamp.date() for t in transactions]
        date_counts = pd.Series(dates).value_counts().sort_index()
        
        fig = px.line(
            x=date_counts.index,
            y=date_counts.values,
            title="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º",
            labels={'x': '–î–∞—Ç–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤–∞–ª—é—Ç–∞–º
        currency_counts = pd.Series([t.currency for t in transactions]).value_counts()
        
        fig = px.pie(
            values=currency_counts.values,
            names=currency_counts.index,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º"
        )
        st.plotly_chart(fig, use_container_width=True)

def show_statistics():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    st.header("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    transactions = st.session_state.db_manager.get_all_transactions()
    
    if not transactions:
        st.info("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        currencies = list(set(t.currency for t in transactions))
        selected_currency = st.selectbox("–í–∞–ª—é—Ç–∞", ["–í—Å–µ"] + currencies)
    
    with col2:
        date_range = st.date_input(
            "–ü–µ—Ä–∏–æ–¥",
            value=(datetime.now().date() - timedelta(days=30), datetime.now().date())
        )
    
    with col3:
        min_amount = st.number_input("–ú–∏–Ω. —Å—É–º–º–∞", value=0.0)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_transactions = transactions
    
    if selected_currency != "–í—Å–µ":
        filtered_transactions = [t for t in filtered_transactions if t.currency == selected_currency]
    
    if len(date_range) == 2:
        start_date, end_date = date_range
        filtered_transactions = [
            t for t in filtered_transactions 
            if start_date <= t.timestamp.date() <= end_date
        ]
    
    filtered_transactions = [t for t in filtered_transactions if t.amount >= min_amount]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if filtered_transactions:
        st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df = pd.DataFrame([
            {
                '–î–∞—Ç–∞': t.timestamp,
                '–°—É–º–º–∞': t.amount,
                '–í–∞–ª—é—Ç–∞': t.currency,
                '–ü–æ–ª—É—á–∞—Ç–µ–ª—å': t.recipient
            }
            for t in filtered_transactions
        ])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
            st.dataframe(df['–°—É–º–º–∞'].describe())
        
        with col2:
            st.write("**–¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:**")
            top_recipients = df['–ü–æ–ª—É—á–∞—Ç–µ–ª—å'].value_counts().head(10)
            st.dataframe(top_recipients)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º
            fig = px.histogram(
                df,
                x='–°—É–º–º–∞',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                nbins=20
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
            df_time = df.set_index('–î–∞—Ç–∞').resample('D')['–°—É–º–º–∞'].sum()
            fig = px.line(
                df_time,
                title="–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º"
            )
            st.plotly_chart(fig, use_container_width=True)

def show_settings():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if st.session_state.current_user["role"] != "admin":
        st.error("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    tab1, tab2, tab3, tab4 = st.tabs(["üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "üè¶ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"])
    
    with tab1:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:**")
            st.write(f"‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: {settings.security.ACCESS_TOKEN_EXPIRE_MINUTES} –º–∏–Ω")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: {settings.security.MAX_LOGIN_ATTEMPTS}")
            st.write(f"‚Ä¢ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {settings.security.LOCKOUT_DURATION_MINUTES} –º–∏–Ω")
            
            st.write("**–ü–∞—Ä–æ–ª–∏:**")
            st.write(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {settings.security.MIN_PASSWORD_LENGTH}")
            st.write(f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {'–î–∞' if settings.security.REQUIRE_SPECIAL_CHARS else '–ù–µ—Ç'}")
        
        with col2:
            st.write("**–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:**")
            st.write("‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –í–∫–ª—é—á–µ–Ω–æ")
            st.write("‚Ä¢ –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –í–∫–ª—é—á–µ–Ω–∞")
            st.write("‚Ä¢ –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π: –í–∫–ª—é—á–µ–Ω")
    
    with tab2:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:**")
            st.write(f"‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: {'–î–∞' if settings.performance.CACHE_ENABLED else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ TTL: {settings.performance.CACHE_TTL_SECONDS} —Å–µ–∫")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.performance.CACHE_MAX_SIZE}")
            
            st.write("**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {settings.performance.MAX_TRANSACTIONS_PER_REQUEST}")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {settings.performance.MAX_FILE_SIZE_MB} –ú–ë")
        
        with col2:
            st.write("**–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**")
            st.write(f"‚Ä¢ –í–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if settings.performance.ASYNC_PROCESSING else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: {settings.performance.MAX_CONCURRENT_TASKS}")
    
    with tab3:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–û—Å–Ω–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**")
            st.write(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {settings.logging.LOG_LEVEL}")
            st.write(f"‚Ä¢ –§–∞–π–ª: {settings.logging.LOG_FILE}")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.logging.LOG_MAX_SIZE_MB} –ú–ë")
            
            st.write("**–ê—É–¥–∏—Ç:**")
            st.write(f"‚Ä¢ –í–∫–ª—é—á–µ–Ω: {'–î–∞' if settings.logging.AUDIT_LOG_ENABLED else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ –§–∞–π–ª: {settings.logging.AUDIT_LOG_FILE}")
        
        with col2:
            st.write("**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**")
            st.write(f"‚Ä¢ Sentry: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings.monitoring.SENTRY_DSN else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            st.write(f"‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.monitoring.METRICS_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
            st.write(f"‚Ä¢ –ê–ª–µ—Ä—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.monitoring.ALERTS_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
    
    with tab4:
        st.subheader("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**PCI DSS:**")
            st.write(f"‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if settings.compliance.PCI_COMPLIANCE_ENABLED else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {'–î–∞' if settings.compliance.MASK_SENSITIVE_DATA else '–ù–µ—Ç'}")
            
            st.write("**–ê—É–¥–∏—Ç:**")
            st.write(f"‚Ä¢ –ê—É–¥–∏—Ç –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {'–î–∞' if settings.compliance.AUDIT_ALL_TRANSACTIONS else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ: {settings.compliance.AUDIT_RETENTION_YEARS} –ª–µ—Ç")
        
        with col2:
            st.write("**–í–∞–ª–∏–¥–∞—Ü–∏—è:**")
            st.write(f"‚Ä¢ –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if settings.compliance.STRICT_VALIDATION else '–ù–µ—Ç'}")
            st.write(f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–Ω–∫—Ü–∏–π: {'–î–∞' if settings.compliance.SANCTIONS_CHECK_ENABLED else '–ù–µ—Ç'}")
            
            st.write("**–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å:**")
            st.write(f"‚Ä¢ –†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {'–î–∞' if settings.compliance.REGULATORY_REPORTS_ENABLED else '–ù–µ—Ç'}")

def show_testing():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if st.session_state.current_user["role"] != "admin":
        st.error("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    st.subheader("üîí –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"):
            test_data = "1234567890123456"
            encrypted = security_manager.encrypt_sensitive_data(test_data)
            decrypted = security_manager.decrypt_sensitive_data(encrypted)
            
            st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:**")
            st.write(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
            st.write(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {encrypted[:20]}...")
            st.write(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {decrypted}")
            st.write(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" if test_data == decrypted else "‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    with col2:
        if st.button("–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏"):
            test_account = "1234567890123456"
            masked_account = security_manager.mask_data(test_account, "account")
            
            st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏:**")
            st.write(f"–ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: {test_account}")
            st.write(f"–ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {masked_account}")
            st.write("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    st.subheader("‚ö° –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    if st.button("–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."):
            start_time = time.time()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            test_transactions = get_sample_transactions()[:10]
            results = []
            
            for transaction in test_transactions:
                result = st.session_state.processor.process_transaction(transaction)
                results.append(result)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**")
            st.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(test_transactions)}")
            st.write(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            st.write(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {processing_time/len(test_transactions):.3f} —Å–µ–∫")
            
            if processing_time < 5.0:
                st.success("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω")
            else:
                st.warning("‚ö†Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.subheader("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        validation_result = validate_settings()
        
        if validation_result["is_valid"]:
            st.success("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            st.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
            for error in validation_result["errors"]:
                st.write(f"‚Ä¢ {error}")
        
        if validation_result["warnings"]:
            st.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in validation_result["warnings"]:
                st.write(f"‚Ä¢ {warning}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not st.session_state.user_authenticated:
        show_login_page()
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title(f"üè¶ {settings.APP_NAME}")
    st.markdown(f"**–í–µ—Ä—Å–∏—è {settings.APP_VERSION} - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = st.session_state.current_user
    st.sidebar.success(f"üë§ {user_info['username']} ({user_info['role']})")
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.header("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
            ["üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "üîç –ê–Ω–∞–ª–∏–∑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "üìä Dashboard", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        )
        
        st.divider()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.info(f"""
        **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
        
        **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:** {len(st.session_state.db_manager.get_all_transactions())}
        
        **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
        
        **–†–µ–∂–∏–º:** {settings.ENVIRONMENT}
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("üö™ –í—ã–π—Ç–∏"):
            log_user_action("LOGOUT", "AUTH", {"username": user_info['username']})
            st.session_state.user_authenticated = False
            st.session_state.current_user = None
            st.rerun()
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å":
        show_security_dashboard()
    elif page == "üîç –ê–Ω–∞–ª–∏–∑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π":
        show_transaction_analysis()
    elif page == "üìä Dashboard":
        show_dashboard()
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings()
    elif page == "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        show_testing()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    validation_result = validate_settings()
    if not validation_result["is_valid"]:
        logger.error("–û—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        for error in validation_result["errors"]:
            logger.error(f"‚Ä¢ {error}")
        st.error("‚ùå –û—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        st.stop()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    main() 